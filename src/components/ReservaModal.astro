---
import tarifas from "../data/tarifas.json";

interface Props {
  whatsapp?: string;   // 5491122334455
  minDias?: number;    // mínimo a cobrar
  triggerText?: string;
}

const {
  whatsapp = "5491122334455",
  minDias = 1,
  triggerText = "Calcular reserva",
} = Astro.props;

const HORAS = Array.from({ length: 24 }, (_, i) => i); // 0..23
const MINUTOS = [0, 15, 30, 45];
---

<button
  data-reserva-open
  class="hidden rounded-md bg-[var(--bp-primary)] text-white font-semibold px-5 py-3 shadow hover:opacity-90 transition"
>
  {triggerText}
</button>

<dialog id="reserva-modal" class="bp-modal" data-min-dias={minDias} data-whatsapp={whatsapp}>
  <div class="panel relative w-[min(720px,92vw)] rounded-2xl bg-[var(--bp-surface)] text-[var(--bp-ink)] p-6 sm:p-8 shadow-xl transition">
    <button type="button" data-close class="absolute right-4 top-4 h-9 w-9 grid place-items-center rounded-full border border-[var(--bp-border)] hover:bg-[var(--bp-bg)]" aria-label="Cerrar">✕</button>

    <!-- Paso 1 -->
    <section data-step="form">
      <h2 class="text-2xl font-bold">Calculá tu reserva</h2>
      <p class="mt-1 text-[var(--bp-ink-muted)]">Ingresá fecha y hora de inicio/fin. Se cuentan días completos de 24 h. Mínimo {minDias} día(s).</p>

      <form class="mt-5 grid gap-4 sm:grid-cols-2" id="form-reserva">
        <!-- Desde -->
        <div class="col-span-full text-sm font-semibold text-[var(--bp-ink-muted)]">Desde</div>

        <label class="flex items-center gap-3 rounded-xl border border-[var(--bp-border)] bg-[var(--bp-bg)] px-4 py-3">
          <span class="min-w-16 text-sm">Fecha</span>
          <input type="date" name="startDate" required class="flex-1 bg-transparent outline-none" />
        </label>

        <div class="flex items-center gap-3 rounded-xl border border-[var(--bp-border)] bg-[var(--bp-bg)] px-4 py-3">
          <span class="min-w-16 text-sm">Hora</span>
          <select name="startHour" required class="bg-transparent outline-none">
            <option value="" disabled selected>HH</option>
            {HORAS.map(h => <option value={h}>{String(h).padStart(2,'0')}</option>)}
          </select>
          :
          <select name="startMin" required class="bg-transparent outline-none">
            <option value="" disabled selected>MM</option>
            {MINUTOS.map(m => <option value={m}>{String(m).padStart(2,'0')}</option>)}
          </select>
        </div>

        <!-- Hasta -->
        <div class="col-span-full mt-2 text-sm font-semibold text-[var(--bp-ink-muted)]">Hasta</div>

        <label class="flex items-center gap-3 rounded-xl border border-[var(--bp-border)] bg-[var(--bp-bg)] px-4 py-3">
          <span class="min-w-16 text-sm">Fecha</span>
          <input type="date" name="endDate" required class="flex-1 bg-transparent outline-none" />
        </label>

        <div class="flex items-center gap-3 rounded-xl border border-[var(--bp-border)] bg-[var(--bp-bg)] px-4 py-3">
          <span class="min-w-16 text-sm">Hora</span>
          <select name="endHour" required class="bg-transparent outline-none">
            <option value="" disabled selected>HH</option>
            {HORAS.map(h => <option value={h}>{String(h).padStart(2,'0')}</option>)}
          </select>
          :
          <select name="endMin" required class="bg-transparent outline-none">
            <option value="" disabled selected>MM</option>
            {MINUTOS.map(m => <option value={m}>{String(m).padStart(2,'0')}</option>)}
          </select>
        </div>

        <div class="col-span-full">
          <button type="submit" class="w-full rounded-md bg-[var(--bp-primary)] text-white font-semibold px-6 py-3 shadow hover:opacity-90 transition">Calcular reserva</button>
        </div>

        <p data-error class="col-span-full hidden rounded-lg border border-red-300 bg-red-50 px-4 py-2 text-sm text-red-800"></p>
      </form>
    </section>

    <!-- Paso 2 -->
    <section data-step="summary" class="hidden">
      <h2 class="text-2xl font-bold">Resumen de tu reserva</h2>

      <div class="mt-4 space-y-3 text-[15px] sm:text-base">
        <p><strong>Retiro en Ezeiza:</strong> <span data-out="inicio"></span></p>
        <p><strong>Entrega en Ezeiza:</strong> <span data-out="fin"></span></p>
        <p><strong>Días contratados:</strong> <span data-out="dias"></span></p>

        <!-- Mostramos total final (con descuento si aplica) -->
        <p>
          <strong>Total a pagar:</strong>
          <span data-out="total"></span>
          <span class="text-[var(--bp-ink-muted)]">(Valor mínimo {minDias} día{minDias>1?'s':''})</span>
        </p>

        <!-- Línea informativa opcional de descuento -->
        <p data-desc-info class="hidden text-[var(--bp-ink-muted)]"></p>

        <p class="text-[var(--bp-ink-muted)]">El precio queda sujeto a variaciones de tarifas al momento de dejar el vehículo.</p>
      </div>

      <div class="mt-6 grid gap-3 sm:grid-cols-2">
        <a data-wa href="#" target="_blank" rel="noopener" class="rounded-md border-2 border-[var(--bp-accent)] bg-[var(--bp-accent)]/10 px-6 py-3 text-center font-semibold hover:scale-[1.01] transition">Reservar</a>
        <button type="button" data-back class="rounded-md border border-[var(--bp-border)] px-6 py-3 text-center font-semibold hover:bg-[var(--bp-bg)] transition">Volver a calcular</button>
      </div>
    </section>
  </div>

  <style>
    .bp-modal{ border:0; padding:0; background:transparent }
    .bp-modal::backdrop{ background:rgba(0,0,0,.45) }
    .bp-modal[open] .panel{ opacity:1; transform: scale(1) translateY(0) }
    .panel{ opacity:0; transform: scale(.98) translateY(6px) }
  </style>

  <!-- Pasamos "tarifas" al JS del cliente -->
  <script is:inline define:vars={{ tarifas }}>
    const modal = document.getElementById("reserva-modal");

    // ====== TARIFAS (directo del servidor) ======
    const TARIFAS_RAW = tarifas;

    // --- helpers ---
    const toInt = (v) => { if (typeof v === "number") return Math.trunc(v); return Number(String(v).replace(/\D/g,""))||0; };
    const pad2  = (n) => String(n).padStart(2,"0");
    const todayStr = () => {
      const d = new Date();
      return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())}`;
    };

    // ✅ normaliza incluyendo DESCUENTO (cuarto valor)
    function normalizarTarifas(raw){
      const base = Array.isArray(raw) ? raw
                 : (raw && typeof raw==="object") ? (Object.values(raw).find(v=>Array.isArray(v))||[])
                 : [];
      const out = base.map(r=>{
        if (Array.isArray(r)) {
          // [desde, hasta, valor, descuento?]
          const d = toInt(r[0]), h = toInt(r[1]), v = toInt(r[2]), desc = toInt(r[3] ?? 0);
          return [d,h,v,desc];
        }
        if (r && typeof r==="object"){
          const d = toInt(r.desde ?? r.diaDesde ?? r.min ?? r[0]);
          const h = toInt(r.hasta ?? r.diaHasta ?? r.max ?? r[1]);
          const v = toInt(r.valor ?? r.precio ?? r.rate ?? r[2]);
          const desc = toInt(r.descuento ?? r.discount ?? 0);
          return [d,h,v,desc];
        }
        return [NaN,NaN,NaN,NaN];
      }).filter(([d,h,v])=>Number.isFinite(d)&&Number.isFinite(h)&&Number.isFinite(v)&&d>0&&h>=d&&v>0)
        .sort((a,b)=>a[0]-b[0]);
      return out;
    }

    const TARIFAS = normalizarTarifas(TARIFAS_RAW);
    const MIN_DIAS = Number(modal?.dataset.minDias || "1");
    const WHATSAPP = modal?.dataset.whatsapp || "";

    const nf   = new Intl.NumberFormat("es-AR",{style:"currency",currency:"ARS"});
    const fmtDT= (d)=>d.toLocaleString("es-AR",{dateStyle:"short",timeStyle:"short"});

    function parseInputs(fd){
      const sd=fd.get("startDate"), sh=fd.get("startHour"), sm=fd.get("startMin");
      const ed=fd.get("endDate"),   eh=fd.get("endHour"),   em=fd.get("endMin");
      if(!sd||!sh||!sm||!ed||!eh||!em) return null;
      return {
        start:new Date(`${sd}T${pad2(sh)}:${pad2(sm)}:00`),
        end:  new Date(`${ed}T${pad2(eh)}:${pad2(em)}:00`)
      };
    }

    // DÍAS EFECTIVOS (floor de 24h, sin mínimo)
    function diasEfectivos(start,end){
      const diff=end-start;
      if(isNaN(diff)||diff<=0) return 0;
      return Math.floor(diff/(24*60*60*1000));
    }

    // ✅ devuelve precio por día y descuento del rango
    function precioYDesc(dias){
      for (const [desde,hasta,valor,desc=0] of TARIFAS){
        if (dias>=desde && dias<=hasta) return { valor, desc };
      }
      if (TARIFAS.length){
        const [,,valor,desc=0] = TARIFAS[TARIFAS.length-1];
        return { valor, desc };
      }
      return { valor:0, desc:0 };
    }

    // ====== Restricciones de fecha/hora ======
    const form=modal.querySelector("#form-reserva");
    const errEl=modal.querySelector("[data-error]");
    const stepForm=modal.querySelector('[data-step="form"]');
    const stepSum=modal.querySelector('[data-step="summary"]');
    const out=(k)=>modal.querySelector(`[data-out="${k}"]`);
    const descInfo = modal.querySelector("[data-desc-info]");
    const btnBack=modal.querySelector("[data-back]");
    const btnClose=modal.querySelector("[data-close]");
    const aWa=modal.querySelector("[data-wa]");

    const startDate = form.querySelector('input[name="startDate"]');
    const startHour = form.querySelector('select[name="startHour"]');
    const startMin  = form.querySelector('select[name="startMin"]');
    const endDate   = form.querySelector('input[name="endDate"]');
    const endHour   = form.querySelector('select[name="endHour"]');
    const endMin    = form.querySelector('select[name="endMin"]');

    function disableOptions(select, predicate){
      for (const opt of select.options){
        if (!opt.value) continue;
        const n = Number(opt.value);
        opt.disabled = predicate(n);
      }
      const sel = select.selectedOptions[0];
      if (sel && sel.disabled){
        const first = Array.from(select.options).find(o=>o.value && !o.disabled);
        select.value = first ? first.value : "";
      }
    }

    function refreshStartConstraints(){
      startDate.min = todayStr();

      const now = new Date();
      const isToday = startDate.value === todayStr();

      if (isToday){
        const hNow = now.getHours();
        disableOptions(startHour, (h)=>h < hNow);

        const next15 = Math.ceil(now.getMinutes()/15)*15;
        if (Number(startHour.value) === hNow){
          disableOptions(startMin, (m)=>m < Math.min(next15,45));
          if (next15 >= 60){
            const nextHour = Array.from(startHour.options).find(o=>o.value && !o.disabled && Number(o.value) > hNow);
            if (nextHour){
              startHour.value = nextHour.value;
              disableOptions(startMin, ()=>false);
            }
          }
        } else {
          disableOptions(startMin, ()=>false);
        }
      } else {
        disableOptions(startHour, ()=>false);
        disableOptions(startMin,  ()=>false);
      }
      if (startDate.value) {
        endDate.min = startDate.value;
        if (endDate.value && endDate.value < startDate.value) endDate.value = startDate.value;
      }
      refreshEndConstraints();
    }

    function refreshEndConstraints(){
      if (!startDate.value) return;
      endDate.min = startDate.value;
      const sameDay = endDate.value && endDate.value === startDate.value;

      if (sameDay){
        const hMin = Number(startHour.value || -1);
        const mMin = Number(startMin.value  || -1);

        disableOptions(endHour, (h)=> h < hMin);
        if (Number(endHour.value) === hMin){
          disableOptions(endMin, (m)=> m < mMin);
        } else {
          disableOptions(endMin, ()=>false);
        }
      } else {
        disableOptions(endHour, ()=>false);
        disableOptions(endMin,  ()=>false);
      }
    }

    // Abrir modal
    document.addEventListener("click",(e)=>{
      const b=e.target.closest("[data-reserva-open]");
      if(!b) return;
      e.preventDefault();
      form.reset();
      errEl.classList.add("hidden"); errEl.textContent="";
      descInfo?.classList.add("hidden"); if (descInfo) descInfo.textContent="";
      stepForm.classList.remove("hidden");
      stepSum.classList.add("hidden");

      startDate.min = todayStr();
      endDate.min   = todayStr();
      refreshStartConstraints();
      refreshEndConstraints();

      modal.showModal();
    });

    // listeners restricciones
    startDate.addEventListener('change', refreshStartConstraints);
    startHour.addEventListener('change', refreshStartConstraints);
    startMin .addEventListener('change', refreshStartConstraints);
    endDate  .addEventListener('change', refreshEndConstraints);
    endHour  .addEventListener('change', refreshEndConstraints);
    btnClose?.addEventListener("click",()=>modal.close());
    btnBack ?.addEventListener("click",()=>{ stepSum.classList.add("hidden"); stepForm.classList.remove("hidden"); });

    // ===== Submit / cálculo =====
    form.addEventListener("submit",(e)=>{
      e.preventDefault();

      if (!TARIFAS.length){
        errEl.textContent="No hay tarifas configuradas. Revisá src/data/tarifas.json.";
        errEl.classList.remove("hidden");
        return;
      }

      const data=new FormData(form);
      const parsed = parseInputs(data);
      if(!parsed) return;

      const {start,end}=parsed;

      const now = new Date();
      if (start < now){
        errEl.textContent = "La fecha/hora de inicio no puede ser anterior al momento actual.";
        errEl.classList.remove("hidden");
        return;
      }
      if (!(end > start)){
        errEl.textContent = "La fecha/hora de fin debe ser posterior al inicio.";
        errEl.classList.remove("hidden");
        return;
      }
      if (startDate.value === endDate.value){
        const sh = Number(startHour.value), sm = Number(startMin.value);
        const eh = Number(endHour.value),   em = Number(endMin.value);
        if (eh < sh || (eh === sh && em <= sm)){
          errEl.textContent = "La hora de fin debe ser posterior a la hora de inicio.";
          errEl.classList.remove("hidden");
          return;
        }
      }

      errEl.classList.add("hidden"); errEl.textContent="";
      descInfo?.classList.add("hidden"); if (descInfo) descInfo.textContent="";

      // 1) días efectivos
      const diasReal = diasEfectivos(start,end);

      // 2) días cobrados (mínimo)
      const diasCobr = Math.max(diasReal, MIN_DIAS);

      // 3) precio + descuento por rango
      const { valor: pxd, desc } = precioYDesc(diasCobr);
      if(!Number.isFinite(pxd)||pxd<=0){
        errEl.textContent=`No se encontró tarifa para ${diasCobr} día(s). Revisá tus rangos.`;
        errEl.classList.remove("hidden");
        return;
      }

      const subtotal = pxd * diasCobr;
      const total    = Math.round(subtotal * (1 - (desc||0)/100));

      // Salida
      out("inicio").textContent = fmtDT(start);
      out("fin").textContent    = fmtDT(end);
      out("dias").textContent   = diasReal < MIN_DIAS
        ? `${diasReal} (se cobra ${diasCobr})`
        : String(diasReal);
      out("total").textContent  = nf.format(total);

      // Info visual de descuento (si aplica)
      if (descInfo && (desc||0) > 0){
        descInfo.textContent = `Incluye ${desc}% de descuento sobre el subtotal ${nf.format(subtotal)}.`;
        descInfo.classList.remove("hidden");
      }

      // WhatsApp
      const lineas = [
        "Reserva de cochera",
        `Retiro: ${fmtDT(start)}`,
        `Entrega: ${fmtDT(end)}`,
        `Días efectivos: ${diasReal}`,
        `Días cobrados: ${diasCobr}`,
        `Tarifa por día: ${nf.format(pxd)}`
      ];
      if ((desc||0) > 0){
        lineas.push(`Subtotal: ${nf.format(subtotal)}`);
        lineas.push(`Descuento: ${desc}%`);
        lineas.push(`Total con descuento: ${nf.format(total)}`);
      } else {
        lineas.push(`Total: ${nf.format(total)}`);
      }
      if (diasCobr > diasReal) lineas.splice(4,0,`Mínimo aplicado: ${MIN_DIAS} día(s)`);

      aWa.href = `https://wa.me/${WHATSAPP}?text=${encodeURIComponent(lineas.join("\n"))}`;

      stepForm.classList.add("hidden");
      stepSum.classList.remove("hidden");
    });
  </script>
</dialog>
