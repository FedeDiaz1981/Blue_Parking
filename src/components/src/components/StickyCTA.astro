---
interface Props {
  href: string;                 // destino principal (reserva)
  label?: string;               // texto del botón
  whatsappHref?: string;        // opcional: link a WhatsApp
  class?: string;
}
const {
  href = "#",
  label = "Reservá ahora",
  whatsappHref,
  class: extra = "",
} = Astro.props as Props;
---

<div
  id="sticky-cta"
  class={`fixed inset-x-0 bottom-0 z-[60] md:hidden pointer-events-none
          transition-all duration-300
          data-[hidden='1']:opacity-0 data-[hidden='1']:translate-y-full ${extra}`}
  style="padding-bottom:calc(env(safe-area-inset-bottom,0px));"
>
  <div class="mx-auto max-w-[17rem] px-4">
    <div class="pointer-events-auto mb-4 rounded-full border border-[var(--bp-border)]
                bg-[color-mix(in_srgb,var(--bp-surface) 88%,transparent)]
                backdrop-blur shadow-lg mr-[8%]">
      <div class="flex items-center gap-2 p-2">
        <a
          href={href}
          data-reserva-open
          class="flex-1 rounded-full px-5 py-3 text-center font-semibold
                 bg-[var(--bp-accent)] hover:bg-[var(--bp-accent-600)]
                 text-[#111] transition-colors"
        >
          {label}
        </a>

        {whatsappHref && (
          <a
            href={whatsappHref}
            aria-label="WhatsApp"
            class="grid place-items-center rounded-full px-4 py-3
                   bg-[var(--bp-support)] hover:bg-[var(--bp-support-600)]
                   text-white"
          >
            <!-- ícono WA -->
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"
                 class="h-6 w-6 fill-current">
              <path d="M380.9 97.1C339 55.1 283.2 32 224.8 32..."/>
            </svg>
          </a>
        )}
      </div>
    </div>
  </div>

  <script is:inline>
    (() => {
      // Oculta la barra si algún CTA "grande" está visible en pantalla
      const bar = document.getElementById('sticky-cta');
      const targets = document.querySelectorAll('[data-cta-observer]');
      if (!bar || !targets.length) return;

      const io = new IntersectionObserver((entries) => {
        const visible = entries.some(e => e.isIntersecting && e.intersectionRatio > 0.05);
        bar.setAttribute('data-hidden', visible ? '1' : '0');
      }, { threshold: [0, 0.05, 0.25] });

      targets.forEach(t => io.observe(t));
    })();
  </script>
</div>
